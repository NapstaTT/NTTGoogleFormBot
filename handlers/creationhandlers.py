from aiogram import F, Router
from aiogram.types import Message, ReplyKeyboardRemove, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from keyboards.inline import confirm_title_keyboard, confirm_Q_keyboard, finish_form

from FSM.states import UserStates
crouter = Router()


@crouter.message(F.text == '–°–æ–∑–¥–∞—Ç—å —Ñ–æ—Ä–º—É')
async def creation_of_form(message: Message, state: FSMContext): #–ó–∞–ø—Ä–æ—Å –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–æ—Ä–º—ã
    await ReplyKeyboardRemove() 
    await state.set_state(UserStates.title)
    await message.reply("–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–æ—Ä–º—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –µ—ë –Ω–∞–∑–≤–∞–Ω–∏–µ")

@crouter.message(StateFilter(UserStates.title))
async def settingTitle(message: Message, state: FSMContext): #–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–æ—Ä–º—ã
    await state.update_data(title = message.text)
    await state.set_state(UserStates.sureT)

@crouter.message(StateFilter(UserStates.sureT))
async def suretitle(message: Message, state: FSMContext): #–ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–∫–∞–∑–∞–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è
    data=await state.get_data()
    data=data.get("title")
    await message.reply(f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ñ–æ—Ä–º–∞ –±—É–¥–µ—Ç –Ω–∞–∑–≤–∞–Ω–∞ {data}?", reply_markup=confirm_title_keyboard)

@crouter.callback_query(F.data == "title_cancel") 
async def wrongT(callback: CallbackQuery, state: FSMContext):#–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–∞–∑–∞ 
    await state.set_state(UserStates.title)
    await callback.answer("–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–æ—Ä–º—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –µ—ë –Ω–∞–∑–≤–∞–Ω–∏–µ")

@crouter.callback_query(F.data == "title_confirm")
async def corrT(callback: CallbackQuery, state: FSMContext): #–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    await callback.message.answer("–§–æ—Ä–º–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞, —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞")
    await state.set_state(UserStates.questionTi)
    await state.update_data(questionTi=[], questionTy=[], index=0) #–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤

@crouter.message(StateFilter(UserStates.questionTi))
async def settingQ(message: Message, state: FSMContext): #–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞
    data = await state.get_data()
    questionTi_list = data.get("questionTi")
    new_questionTi = questionTi_list + [message.text]
    await state.update_data(
        questionTi=new_questionTi
    )
    await state.set_state(UserStates.questionTy)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–æ–ø—Ä–æ—Å–∞: –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ–∫–∞ —Ç–æ–ª—å–∫–æ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º")

@crouter.message(StateFilter(UserStates.questionTy))
async def settingT(message: Message, state: FSMContext): #–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏–ø–∞ –≤–æ–ø—Ä–æ—Å–∞
    data = await state.get_data()
    questionTy_list = data.get("questionTy")
    new_questionTy = questionTy_list + ["textQuestion"]
    await state.update_data(
        questionTy=new_questionTy
    )
    await state.set_state(UserStates.sureQ)
    question_titles = data["questionTi"]
    current_index = data["index"]
    last_question_index = current_index
    question_title = question_titles[last_question_index]
    question_type = new_questionTy[last_question_index]
    await message.reply(
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞:\n\n"
        f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {question_title}\n"
        f"üîß –¢–∏–ø: {question_type}",
        reply_markup=confirm_Q_keyboard
    )

@crouter.callback_query(F.data == "FCANCEL")
async def formcancel(callback: CallbackQuery, state: FSMContext): #–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–æ—Ä–º—ã
    await callback.message.answer("–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã")
    await state.clear()

@crouter.callback_query(F.data == "Q_cancel")
async def Qcancel(callback: CallbackQuery, state: FSMContext): #–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    data = await state.get_data()
    new_questionTi = data["questionTi"][:-1]
    new_questionTy = data["questionTy"][:-1]
    await state.update_data(
        questionTi=new_questionTi,
        questionTy=new_questionTy
    )
    await callback.message.answer("–í–æ–ø—Ä–æ—Å —É–¥–∞–ª—ë–Ω, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É –≤–æ–ø—Ä–æ—Å–∞")
    await state.set_state(UserStates.questionTi)

@crouter.callback_query(F.data == "Q_confirm")
async def Qconfirm(callback: CallbackQuery, state: FSMContext): #–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    data = await state.get_data()
    new_index = data["index"]+1
    await state.update_data(
        index=str(new_index)
    )
    await callback.message.answer("–í–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω, –≤–≤–µ–¥–∏—Ç–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–æ—Ä–º—ã", reply_markup=finish_form)
    await state.set_state(UserStates.questionTi)
@crouter.callback_query(F.data == "finishF")
async def finishF(callback: CallbackQuery, state: FSMContext):
    #—Ç—É—Ç –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ HTTP –∑–∞–ø—Ä–æ—Å–∞ –≤ –≥—É–≥–ª —Å –¥–∞–Ω–Ω—ã–º, —Å –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º –≤ –≤–∏–¥–µ –¥—Ä—É–≥–æ–≥–æ –º–µ—Ç–æ–¥–∞ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è payload
    await state.clear()
    await callback.message.answer("–§–æ—Ä–º–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞~")